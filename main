-- Load Kavo UI
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptco/UILib/main/KavoUI.lua"))()
local Window = Library.CreateLib("Tool Utilities", "Sentinel")

local Tab = Window:NewTab("Automation")
local Section = Tab:NewSection("Tool Controls")

-- Services
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
local toolsFolder = workspace:WaitForChild("CrimsonsMoons")

-- HITBOX EXTENDER
local runningHitbox = false
local hitboxConnection

local function resizeHitbox(tool)
    local hitbox = tool:FindFirstChild("Hitbox")
    if hitbox and hitbox:IsA("BasePart") then
        hitbox.Size = Vector3.new(50, 50, 50)
        hitbox.CFrame = tool.CFrame
        hitbox.CanCollide = false
        hitbox.Anchored = true
        hitbox.Transparency = 0.7
        -- print("Resized hitbox for tool:", tool.Name)
    end
end

local function setHitboxRunning(state)
    runningHitbox = state
    if runningHitbox then
        for _, tool in pairs(toolsFolder:GetChildren()) do
            resizeHitbox(tool)
        end
        hitboxConnection = toolsFolder.ChildAdded:Connect(function(tool)
            resizeHitbox(tool)
        end)
        print("Hitbox extender: ON")
    else
        if hitboxConnection then
            hitboxConnection:Disconnect()
            hitboxConnection = nil
        end
        print("Hitbox extender: OFF")
    end
end

-- TOOL AUTOMATION
local toolKeybinds = {
    ["Clockwork Hammer"] = Enum.KeyCode.R,
    ["Scarletsteel Pickaxe"] = Enum.KeyCode.T,
    ["Steel Axe"] = Enum.KeyCode.Y,
    ["Steel Shovel"] = Enum.KeyCode.F,
    ["Pruning Shears"] = Enum.KeyCode.G,
}

local toolToggleStates = {}
for toolName in pairs(toolKeybinds) do
    toolToggleStates[toolName] = false
end

-- Status GUI (in PlayerGui)
local screenGui = PlayerGui:FindFirstChild("ToolToggleStatus")
if not screenGui then
    screenGui = Instance.new("ScreenGui")
    screenGui.Name = "ToolToggleStatus"
    screenGui.ResetOnSpawn = false
    screenGui.IgnoreGuiInset = true
    screenGui.Parent = PlayerGui

    local statusLabel = Instance.new("TextLabel")
    statusLabel.Name = "StatusLabel"
    statusLabel.Size = UDim2.new(0, 300, 0, 180)
    statusLabel.Position = UDim2.new(0, 10, 0, 10)
    statusLabel.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    statusLabel.BackgroundTransparency = 0.2
    statusLabel.BorderSizePixel = 0
    statusLabel.TextColor3 = Color3.new(1, 1, 1)
    statusLabel.TextXAlignment = Enum.TextXAlignment.Left
    statusLabel.TextYAlignment = Enum.TextYAlignment.Top
    statusLabel.Font = Enum.Font.Code
    statusLabel.TextSize = 16
    statusLabel.RichText = true
    statusLabel.TextWrapped = true
    statusLabel.Text = "Tool Status"
    statusLabel.Parent = screenGui
end
local statusLabel = screenGui:WaitForChild("StatusLabel")

local function updateStatusText()
    local lines = {}
    for toolName, isEnabled in pairs(toolToggleStates) do
        local color = isEnabled and "00ff00" or "ff0000"
        table.insert(lines, `<font color="#{color}">{toolName}: {isEnabled and "ON" or "OFF"}</font>`)
    end
    statusLabel.Text = table.concat(lines, "\n")
end
updateStatusText()

-- Listen for key presses to toggle tools
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    for toolName, keyCode in pairs(toolKeybinds) do
        if input.KeyCode == keyCode then
            toolToggleStates[toolName] = not toolToggleStates[toolName]
            updateStatusText()
        end
    end
end)

local runningToolAutomation = false

local function setToolAutomation(state)
    runningToolAutomation = state
    if runningToolAutomation then
        print("Tool automation: ON")
        task.spawn(function()
            while runningToolAutomation do
                local character = LocalPlayer.Character
                if character then
                    for toolName, isEnabled in pairs(toolToggleStates) do
                        if isEnabled then
                            local tool = character:FindFirstChild(toolName)
                            if tool then
                                local args = {
                                    [1] = tool,
                                    [2] = false
                                }
                                workspace.Remotes.UseItem:FireServer(unpack(args))
                            end
                        end
                    end
                end
                task.wait(0.1)
            end
        end)
    else
        print("Tool automation: OFF")
    end
end

-- Kavo GUI toggles
Section:NewToggle("Toggle Big Hitboxes", "Make all tool hitboxes huge and update new ones", function(value)
    setHitboxRunning(value)
end)

Section:NewToggle("Toggle Tool Automation", "Automatically use toggled tools with keybinds", function(value)
    setToolAutomation(value)
end)
