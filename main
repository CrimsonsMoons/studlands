-- Make sure this is in a LocalScript under StarterPlayerScripts or StarterGui!

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

-- === TOOL BINDINGS ===
local toolKeybinds = {
    ["Clockwork Hammer"] = Enum.KeyCode.R,
    ["Scarletsteel Pickaxe"] = Enum.KeyCode.T,
    ["Steel Axe"] = Enum.KeyCode.Y,
    ["Steel Shovel"] = Enum.KeyCode.F,
    ["Pruning Shears"] = Enum.KeyCode.G,
}

-- === TOGGLE STATES ===
local toolToggleStates = {}
for toolName in pairs(toolKeybinds) do
    toolToggleStates[toolName] = false
end

-- === GUI SETUP ===
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "ToolToggleStatus"
screenGui.ResetOnSpawn = false
screenGui.IgnoreGuiInset = true
screenGui.Parent = PlayerGui

local statusLabel = Instance.new("TextLabel")
statusLabel.Name = "StatusLabel"
statusLabel.Size = UDim2.new(0, 300, 0, 180)
statusLabel.Position = UDim2.new(0, 10, 0, 10)
statusLabel.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
statusLabel.BackgroundTransparency = 0.2
statusLabel.BorderSizePixel = 0
statusLabel.TextColor3 = Color3.new(1, 1, 1)
statusLabel.TextXAlignment = Enum.TextXAlignment.Left
statusLabel.TextYAlignment = Enum.TextYAlignment.Top
statusLabel.Font = Enum.Font.Code
statusLabel.TextSize = 16
statusLabel.RichText = true
statusLabel.TextWrapped = true
statusLabel.Text = "Tool Status"
statusLabel.Parent = screenGui

-- === FUNCTION TO UPDATE STATUS TEXT ===
local function updateStatusText()
    local lines = {}
    for toolName, isEnabled in pairs(toolToggleStates) do
        local color = isEnabled and "00ff00" or "ff0000"
        table.insert(lines, `<font color="#{color}">{toolName}: {isEnabled and "ON" or "OFF"}</font>`)
    end
    statusLabel.Text = table.concat(lines, "\n")
end

updateStatusText()

-- === KEYBIND LISTENER ===
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end

    for toolName, keyCode in pairs(toolKeybinds) do
        if input.KeyCode == keyCode then
            toolToggleStates[toolName] = not toolToggleStates[toolName]
            updateStatusText()
        end
    end
end)

-- === MAIN LOOP TO USE TOOLS ===
while true do
    for toolName, isEnabled in pairs(toolToggleStates) do
        if isEnabled then
            local character = LocalPlayer.Character
            if character then
                local tool = character:FindFirstChild(toolName)
                if tool then
                    local args = {
                        [1] = tool,
                        [2] = false
                    }
                    workspace.Remotes.UseItem:FireServer(unpack(args))
                end
            end
        end
    end
    task.wait(0.1)
end
